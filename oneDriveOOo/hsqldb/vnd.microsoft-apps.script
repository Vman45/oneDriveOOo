SET DATABASE UNIQUE NAME HSQLDB690B6CB856
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET DATABASE DEFAULT TABLE TYPE CACHED
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET FILES WRITE DELAY 60
SET FILES BACKUP INCREMENT FALSE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO FALSE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 10
SET DATABASE COLLATION "French" NO PAD
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
CREATE FUNCTION PUBLIC."getLink"() RETURNS VARCHAR(100) SPECIFIC "getLink_1" LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT RETURN 'application/vnd.microsoft-apps.link'
CREATE FUNCTION PUBLIC."getFolder"() RETURNS VARCHAR(100) SPECIFIC "getFolder_1" LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT RETURN 'application/vnd.microsoft-apps.folder'
CREATE FUNCTION PUBLIC."isLink"(IN MEDIATYPE VARCHAR(100)) RETURNS BOOLEAN SPECIFIC "isLink_1" LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT RETURN MEDIATYPE="getLink"()
CREATE FUNCTION PUBLIC."isFolder"(IN MEDIATYPE VARCHAR(100)) RETURNS BOOLEAN SPECIFIC "isFolder_1" LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT RETURN MEDIATYPE="getFolder"()
CREATE FUNCTION PUBLIC."isDocument"(IN MEDIATYPE VARCHAR(100)) RETURNS BOOLEAN SPECIFIC "isDocument_1" LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT RETURN NOT("isFolder"(MEDIATYPE) OR "isLink"(MEDIATYPE))
CREATE FUNCTION PUBLIC."getContentType"(IN MEDIATYPE VARCHAR(100)) RETURNS VARCHAR(100) SPECIFIC "getContentType_1" LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT IF "isFolder"(MEDIATYPE) OR "isLink"(MEDIATYPE) THEN RETURN MEDIATYPE; ELSE RETURN 'application/vnd.oasis.opendocument';END IF
CREATE FUNCTION PUBLIC."parseTimeStamp"(IN STR VARCHAR(30)) RETURNS TIMESTAMP(3) SPECIFIC "parseTimeStamp_1" LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT RETURN TO_TIMESTAMP(STR, 'YYYY"-"MM"-"DD"T"HH24":"MI":"SS"."F')
CREATE FUNCTION PUBLIC."unparseTimeStamp"(IN TS TIMESTAMP(3)) RETURNS VARCHAR(30) SPECIFIC "unparseTimeStamp_1" LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT RETURN TO_CHAR(TS, 'YYYY"-"MM"-"DD"T"HH24":"MI":"SS"."FF"Z"')
SET SCHEMA PUBLIC
CREATE CACHED TABLE PUBLIC."Users"("Id" VARCHAR(100) NOT NULL PRIMARY KEY,"UserName" VARCHAR(100) NOT NULL,"DisplayName" VARCHAR(100),"RootId" VARCHAR(100) NOT NULL,"TimeStamp" TIMESTAMP DEFAULT CURRENT_TIMESTAMP(3) NOT NULL,CONSTRAINT "UniqueUserName" UNIQUE("UserName"))
CREATE CACHED TABLE PUBLIC."Items"("Id" VARCHAR(100) NOT NULL PRIMARY KEY,"Name" VARCHAR(100),"DateCreated" TIMESTAMP DEFAULT CURRENT_TIMESTAMP(3) NOT NULL,"DateModified" TIMESTAMP DEFAULT CURRENT_TIMESTAMP(3) NOT NULL,"MimeType" VARCHAR(100) DEFAULT 'application/octet-stream' NOT NULL,"Size" BIGINT DEFAULT 0 NOT NULL,"Trashed" BOOLEAN DEFAULT FALSE NOT NULL,"Loaded" SMALLINT DEFAULT 0 NOT NULL,"TimeStamp" TIMESTAMP DEFAULT CURRENT_TIMESTAMP(3) NOT NULL)
CREATE CACHED TABLE PUBLIC."Children"("ChildId" VARCHAR(100) NOT NULL,"ItemId" VARCHAR(100) NOT NULL,"TimeStamp" TIMESTAMP DEFAULT CURRENT_TIMESTAMP(3) NOT NULL,PRIMARY KEY("ChildId","ItemId"),CONSTRAINT "ForeignParentItems" FOREIGN KEY("ItemId") REFERENCES PUBLIC."Items"("Id") ON DELETE CASCADE ON UPDATE CASCADE,CONSTRAINT "ForeignChildItems" FOREIGN KEY("ChildId") REFERENCES PUBLIC."Items"("Id")  ON DELETE CASCADE ON UPDATE CASCADE)
CREATE CACHED TABLE PUBLIC."Capabilities"("UserId" VARCHAR(100) NOT NULL,"ItemId" VARCHAR(100) NOT NULL,"CanAddChild" BOOLEAN DEFAULT TRUE NOT NULL,"CanRename" BOOLEAN DEFAULT TRUE NOT NULL,"IsReadOnly" BOOLEAN DEFAULT FALSE NOT NULL,"IsVersionable" BOOLEAN DEFAULT FALSE NOT NULL,"SyncMode" SMALLINT DEFAULT 0 NOT NULL,"TimeStamp" TIMESTAMP DEFAULT CURRENT_TIMESTAMP(3) NOT NULL,PRIMARY KEY("UserId","ItemId"),CONSTRAINT "ForeignCapabilitiesUsers" FOREIGN KEY("UserId") REFERENCES PUBLIC."Users"("Id"),CONSTRAINT "ForeignCapabilitiesItems" FOREIGN KEY("ItemId") REFERENCES PUBLIC."Items"("Id") ON DELETE CASCADE ON UPDATE CASCADE)
CREATE VIEW PUBLIC."Item" ("UserId","Id","Title","DateCreated","DateModified","ContentType","MediaType","IsLink","IsFolder","IsDocument","Size","Trashed","Loaded","CanAddChild","CanRename","IsReadOnly","IsVersionable","SyncMode","IsRoot","RootId") AS SELECT "U"."Id","I"."Id","I"."Name","I"."DateCreated","I"."DateModified",PUBLIC."getContentType"("I"."MimeType"),"I"."MimeType",PUBLIC."isLink"("I"."MimeType"),PUBLIC."isFolder"("I"."MimeType"),PUBLIC."isDocument"("I"."MimeType"),"I"."Size","I"."Trashed","I"."Loaded","C"."CanAddChild","C"."CanRename","C"."IsReadOnly","C"."IsVersionable","C"."SyncMode","I"."Id"="U"."RootId","U"."RootId" FROM PUBLIC."Items" AS "I"  JOIN PUBLIC."Capabilities" AS "C" ON "I"."Id"="C"."ItemId" JOIN PUBLIC."Users" AS "U" ON "C"."UserId"="U"."Id"
CREATE VIEW PUBLIC."Child" ("UserId","Id","Parent","Title","DateCreated","DateModified","ContentType","MediaType","IsLink","IsFolder","IsDocument","Size","Trashed","Loaded","CanAddChild","CanRename","IsReadOnly","IsVersionable","SyncMode","IsRoot","AtRoot") AS SELECT "I"."UserId","I"."Id","C"."ItemId","I"."Title","I"."DateCreated","I"."DateModified","I"."ContentType","I"."MediaType","I"."IsLink","I"."IsFolder","I"."IsDocument","I"."Size","I"."Trashed","I"."Loaded","I"."CanAddChild","I"."CanRename","I"."IsReadOnly","I"."IsVersionable","I"."SyncMode", "I"."IsRoot","C"."ItemId"="I"."RootId" FROM PUBLIC."Item" AS "I" JOIN PUBLIC."Children" AS "C" ON "I"."Id"="C"."ChildId"
CREATE PROCEDURE PUBLIC."_mergeItem"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN NAME VARCHAR(100),IN DATECREATED VARCHAR(30),IN DATEMODIFIED VARCHAR(30),IN MEDIATYPE VARCHAR(100),IN SIZE BIGINT,IN TRASHED BOOLEAN,OUT ROWCOUNT SMALLINT) SPECIFIC "_mergeItem_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO PUBLIC."Items" AS "I" USING(VALUES(ITEMID,NAME,DATECREATED,DATEMODIFIED,MEDIATYPE,SIZE,TRASHED))AS VALS(A,B,C,D,E,F,G) ON "I"."Id"=VALS.A WHEN MATCHED THEN UPDATE SET "I"."Name"=VALS.B,"I"."DateCreated"="parseTimeStamp"(VALS.C),"I"."DateModified"="parseTimeStamp"(VALS.D),"I"."MimeType"=VALS.E,"I"."Size"=VALS.F,"I"."Trashed"=VALS.G WHEN NOT MATCHED THEN INSERT VALUES VALS.A,VALS.B,"parseTimeStamp"(VALS.C),"parseTimeStamp"(VALS.D),VALS.E,VALS.F,VALS.G,DEFAULT,DEFAULT;GET DIAGNOSTICS ROWCOUNT=ROW_COUNT;END
CREATE PROCEDURE PUBLIC."_mergeCapability"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN CANADDCHILD BOOLEAN,IN CANRENAME BOOLEAN,IN ISREADONLY BOOLEAN,IN ISVERSIONABLE BOOLEAN,OUT ROWCOUNT SMALLINT) SPECIFIC "_mergeCapability_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO PUBLIC."Capabilities" AS "C" USING(VALUES(USERID,ITEMID,CANADDCHILD,CANRENAME,ISREADONLY,ISVERSIONABLE))AS VALS(A,B,C,D,E,F)ON "C"."UserId"=VALS.A AND "C"."ItemId"=VALS.B WHEN MATCHED THEN UPDATE SET "C"."CanAddChild"=VALS.C,"C"."CanRename"=VALS.D,"C"."IsReadOnly"=VALS.E,"C"."IsVersionable"=VALS.F WHEN NOT MATCHED THEN INSERT VALUES VALS.A,VALS.B,VALS.C,VALS.D,VALS.E,VALS.F,DEFAULT,DEFAULT;GET DIAGNOSTICS ROWCOUNT=ROW_COUNT;END
CREATE PROCEDURE PUBLIC."_insertItem"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN NAME VARCHAR(100),IN DATECREATED TIMESTAMP(3),IN DATEMODIFIED TIMESTAMP(3),IN MEDIATYPE VARCHAR(100),IN SIZE BIGINT,IN TRASHED BOOLEAN,IN LOADED SMALLINT,OUT ROWCOUNT SMALLINT) SPECIFIC "_insertItem_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC."Items"("Id","Name","DateCreated","DateModified","MimeType","Size","Trashed","Loaded","TimeStamp")VALUES(ITEMID,NAME,DATECREATED,DATEMODIFIED,MEDIATYPE,SIZE,TRASHED,LOADED,DEFAULT);GET DIAGNOSTICS ROWCOUNT=ROW_COUNT;END
CREATE PROCEDURE PUBLIC."_insertCapability"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN SYNC SMALLINT,IN CANADDCHILD BOOLEAN,IN CANRENAME BOOLEAN,IN ISREADONLY BOOLEAN,IN ISVERSIONABLE BOOLEAN,OUT ROWCOUNT SMALLINT) SPECIFIC "_insertCapability_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC."Capabilities"("UserId","ItemId","CanAddChild","CanRename","IsReadOnly","IsVersionable","SyncMode","TimeStamp")VALUES(USERID,ITEMID,CANADDCHILD,CANRENAME,ISREADONLY,ISVERSIONABLE,SYNC,DEFAULT);GET DIAGNOSTICS ROWCOUNT=ROW_COUNT;END
CREATE PROCEDURE PUBLIC."_insertChild"(IN CHILDID VARCHAR(100),IN PARENTID VARCHAR(100),OUT ROWCOUNT SMALLINT) SPECIFIC "_insertChild_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE INDEX SMALLINT DEFAULT 1;DELETE FROM PUBLIC."Children" WHERE "ChildId"=CHILDID;INSERT INTO PUBLIC."Children"("ChildId","ItemId","TimeStamp")VALUES(CHILDID,PARENTID,DEFAULT);GET DIAGNOSTICS ROWCOUNT=ROW_COUNT;END
CREATE PROCEDURE PUBLIC."_countChild"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN MODE SMALLINT,OUT ROWCOUNT SMALLINT) SPECIFIC "_countChild_1" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC SELECT COUNT("Id")INTO ROWCOUNT FROM PUBLIC."Child" WHERE "UserId"=USERID AND "Parent"=ITEMID AND("IsFolder" OR "Loaded">=MODE);END
CREATE PROCEDURE PUBLIC."getMediaType"(OUT LINK VARCHAR(100),OUT FOLDER VARCHAR(100)) SPECIFIC "getMediaType_1" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC SET LINK="getLink"();SET FOLDER="getFolder"();END
CREATE PROCEDURE PUBLIC."getUser"(IN USERNAME VARCHAR(100)) SPECIFIC "getUser_1" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR WITH RETURN FOR SELECT "U"."Id" AS "UserId","U"."RootId","I"."Name" AS "RootName" FROM PUBLIC."Users" AS "U" JOIN PUBLIC."Items" AS "I" ON "U"."RootId"="I"."Id" WHERE "U"."UserName"=USERNAME FOR READ ONLY;OPEN RESULT;END
CREATE PROCEDURE PUBLIC."getItem"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100)) SPECIFIC "getItem_1" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR WITH RETURN FOR SELECT "I"."Id","I"."Title","I"."Title" AS "TitleOnServer","I"."DateCreated","I"."DateModified","I"."ContentType","I"."MediaType","I"."Size","I"."Trashed","I"."IsRoot","I"."IsFolder","I"."IsDocument",CAST(1 AS BOOLEAN) AS "CanAddChild",CAST(1 AS BOOLEAN) AS "CanRename",CAST(0 AS BOOLEAN) "IsReadOnly",CAST(0 AS BOOLEAN) "IsVersionable","I"."Loaded",CAST('' AS VARCHAR(100)) AS "CasePreservingURL",CAST(0 AS BOOLEAN) AS "IsHidden",CAST(0 AS BOOLEAN) AS "IsVolume",CAST(0 AS BOOLEAN) AS "IsRemote",CAST(0 AS BOOLEAN) AS "IsRemoveable",CAST(0 AS BOOLEAN) AS "IsFloppy",CAST(0 AS BOOLEAN) AS "IsCompactDisc" FROM PUBLIC."Item" AS "I" WHERE "I"."UserId"=USERID AND "I"."Id"=ITEMID FOR READ ONLY;OPEN RESULT;END
CREATE PROCEDURE PUBLIC."getChildren"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN URL VARCHAR(250),IN MODE SMALLINT,OUT ROWCOUNT SMALLINT) SPECIFIC "getChildren_1" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE TMPCOUNT SMALLINT DEFAULT 0;DECLARE RESULT CURSOR WITH RETURN FOR SELECT "Title","Size","DateModified","DateCreated","IsFolder",CASEWHEN("IsFolder",CONCAT(URL,'/',"Id"),CONCAT(URL,'/',"Title"))"TargetURL",FALSE "IsHidden",FALSE "IsVolume",FALSE "IsRemote",FALSE "IsRemoveable",FALSE "IsFloppy",FALSE "IsCompactDisc" FROM PUBLIC."Child" WHERE "UserId"=USERID AND "Parent"=ITEMID AND("IsFolder" OR "Loaded">=MODE)FOR READ ONLY;CALL "_countChild"(USERID,ITEMID,MODE,TMPCOUNT);SET ROWCOUNT=TMPCOUNT;OPEN RESULT;END
CREATE PROCEDURE PUBLIC."mergeUserAndRoot"(IN USERID VARCHAR(100),IN USERNAME VARCHAR(100),IN DISPLAYNAME VARCHAR(100),IN ITEMID VARCHAR(100),IN NAME VARCHAR(100),IN DATECREATED VARCHAR(30),IN DATEMODIFIED VARCHAR(30),IN MEDIATYPE VARCHAR(100),IN SIZE BIGINT,IN TRASHED BOOLEAN,IN CANADDCHILD BOOLEAN,IN CANRENAME BOOLEAN,IN ISREADONLY BOOLEAN,IN ISVERSIONABLE BOOLEAN) SPECIFIC "mergeUserAndRoot_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE TMPCOUNT SMALLINT DEFAULT 0;DECLARE RESULT CURSOR WITH RETURN FOR SELECT "U"."Id" AS "UserId","U"."RootId","I"."Name" AS "RootName" FROM PUBLIC."Users" AS "U" JOIN PUBLIC."Items" AS "I" ON "U"."RootId"="I"."Id" FOR READ ONLY;INSERT INTO PUBLIC."Users"("Id","UserName","DisplayName","RootId","TimeStamp")VALUES(USERID,USERNAME,DISPLAYNAME,ITEMID,DEFAULT);CALL "_mergeItem"(USERID,ITEMID,NAME,DATECREATED,DATEMODIFIED,MEDIATYPE,SIZE,TRASHED,TMPCOUNT);CALL "_mergeCapability"(USERID,ITEMID,CANADDCHILD,CANRENAME,ISREADONLY,ISVERSIONABLE,TMPCOUNT);OPEN RESULT;END
CREATE PROCEDURE PUBLIC."isIdentifier"(IN USERID VARCHAR(100),IN ID VARCHAR(100)) SPECIFIC "isIdentifier_1" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR WITH RETURN FOR SELECT CONVERT(COUNT(1),BOOLEAN)"IsIdentifier" FROM PUBLIC."Items" AS "I" WHERE "I"."Id"=ID FOR READ ONLY;OPEN RESULT;END
CREATE PROCEDURE PUBLIC."isChildId"(IN ITEMID VARCHAR(100),IN CHILDID VARCHAR(100)) SPECIFIC "isChildId_1" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR WITH RETURN FOR SELECT CONVERT(COUNT(1),BOOLEAN)"IsChild" FROM PUBLIC."Children" WHERE "ChildId"=CHILDID AND "ItemId"=ITEMID FOR READ ONLY;OPEN RESULT;END
CREATE PROCEDURE PUBLIC."selectChildId"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN TITLE VARCHAR(100)) SPECIFIC "selectChildId" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR WITH RETURN FOR SELECT "C"."Id" FROM PUBLIC."Child" AS "C" WHERE "C"."UserId"=USERID AND "C"."Parent"=ITEMID AND "C"."Title"=TITLE FOR READ ONLY;OPEN RESULT;END
CREATE PROCEDURE PUBLIC."countChildTitle"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN TITLE VARCHAR(100)) SPECIFIC "countChildTitle_1" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR WITH RETURN FOR SELECT COUNT("Title")FROM PUBLIC."Child" WHERE "UserId"=USERID AND "Parent"=ITEMID AND "Title"=TITLE FOR READ ONLY;OPEN RESULT;END
CREATE PROCEDURE PUBLIC."insertJsonItem"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN NAME VARCHAR(100),IN DATECREATED VARCHAR(30),IN DATEMODIFIED VARCHAR(30),IN MEDIATYPE VARCHAR(100),IN SIZE BIGINT,IN TRASHED BOOLEAN,IN CANADDCHILD BOOLEAN,IN CANRENAME BOOLEAN,IN ISREADONLY BOOLEAN,IN ISVERSIONABLE BOOLEAN,IN PARENTID VARCHAR(100)) SPECIFIC "insertJsonItem_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE TMPCOUNT SMALLINT DEFAULT 0;DECLARE RESULT CURSOR WITH RETURN FOR SELECT "I"."Id","I"."Title","I"."Title" AS "TitleOnServer","I"."DateCreated","I"."DateModified","I"."ContentType","I"."MediaType","I"."Size","I"."Trashed","I"."IsRoot","I"."IsFolder","I"."IsDocument","I"."CanAddChild","I"."CanRename","I"."IsReadOnly","I"."IsVersionable","I"."Loaded",CAST('' AS VARCHAR(100)) AS "CasePreservingURL",CAST(0 AS BOOLEAN) AS "IsHidden",CAST(0 AS BOOLEAN) AS "IsVolume",CAST(0 AS BOOLEAN) AS "IsRemote",CAST(0 AS BOOLEAN) AS "IsRemoveable",CAST(0 AS BOOLEAN) AS "IsFloppy",CAST(0 AS BOOLEAN) AS "IsCompactDisc" FROM PUBLIC."Item" AS "I" WHERE "I"."UserId"=USERID AND "I"."Id"=ITEMID FOR READ ONLY;CALL "_mergeItem"(USERID,ITEMID,NAME,DATECREATED,DATEMODIFIED,MEDIATYPE,SIZE,TRASHED,TMPCOUNT);CALL "_mergeCapability"(USERID,ITEMID,CANADDCHILD,CANRENAME,ISREADONLY,ISVERSIONABLE,TMPCOUNT);CALL "_insertChild"(ITEMID,PARENTID,TMPCOUNT);OPEN RESULT;END
CREATE PROCEDURE PUBLIC."mergeJsonItem"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN NAME VARCHAR(100),IN DATECREATED VARCHAR(30),IN DATEMODIFIED VARCHAR(30),IN MEDIATYPE VARCHAR(100),IN SIZE BIGINT,IN TRASHED BOOLEAN,IN CANADDCHILD BOOLEAN,IN CANRENAME BOOLEAN,IN ISREADONLY BOOLEAN,IN ISVERSIONABLE BOOLEAN,IN PARENTID VARCHAR(100),OUT ROWCOUNT SMALLINT) SPECIFIC "mergeJsonItem_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE TMPCOUNT SMALLINT DEFAULT 0;CALL "_mergeItem"(USERID,ITEMID,NAME,DATECREATED,DATEMODIFIED,MEDIATYPE,SIZE,TRASHED,TMPCOUNT);CALL "_mergeCapability"(USERID,ITEMID,CANADDCHILD,CANRENAME,ISREADONLY,ISVERSIONABLE,TMPCOUNT);CALL "_insertChild"(ITEMID,PARENTID,TMPCOUNT);SET ROWCOUNT=TMPCOUNT;END
CREATE PROCEDURE PUBLIC."insertNewContent"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN SYNC SMALLINT,IN PARENTID VARCHAR(100),IN NAME VARCHAR(100),IN DATECREATED TIMESTAMP(3),IN DATEMODIFIED TIMESTAMP(3),IN MEDIATYPE VARCHAR(100),IN SIZE BIGINT,IN TRASHED BOOLEAN,IN CANADDCHILD BOOLEAN,IN CANRENAME BOOLEAN,IN ISREADONLY BOOLEAN,IN ISVERSIONABLE BOOLEAN,IN LOADED SMALLINT,OUT ROWCOUNT SMALLINT) SPECIFIC "insertNewContent_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE TMPCOUNT SMALLINT DEFAULT 0;CALL "_insertItem"(USERID,ITEMID,NAME,DATECREATED,DATEMODIFIED,MEDIATYPE,SIZE,TRASHED,LOADED,TMPCOUNT);CALL "_insertCapability"(USERID,ITEMID,SYNC,CANADDCHILD,CANRENAME,ISREADONLY,ISVERSIONABLE,TMPCOUNT);CALL "_insertChild"(ITEMID,PARENTID,TMPCOUNT);SET ROWCOUNT=TMPCOUNT;END
CREATE PROCEDURE PUBLIC."updateSyncMode"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN MODE SMALLINT,OUT ROWCOUNT SMALLINT) SPECIFIC "updateSyncMode_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC."Capabilities" SET "SyncMode"=MODE WHERE "UserId"=USERID AND "ItemId"=ITEMID;GET DIAGNOSTICS ROWCOUNT=ROW_COUNT;END
CREATE PROCEDURE PUBLIC."updateLoaded"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN LOADED SMALLINT,OUT ROWCOUNT SMALLINT) SPECIFIC "updateLoaded_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC."Items" SET "Loaded"=LOADED WHERE "Id"=ITEMID;GET DIAGNOSTICS ROWCOUNT=ROW_COUNT;END
CREATE PROCEDURE PUBLIC."updateTitle"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN NAME VARCHAR(100),IN SYNCMODE SMALLINT,OUT ROWCOUNT SMALLINT) SPECIFIC "updateTitle_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE TMPCOUNT SMALLINT DEFAULT 0;UPDATE PUBLIC."Items" SET "Name"=NAME WHERE "Id"=ITEMID;GET DIAGNOSTICS TMPCOUNT=ROW_COUNT;IF TMPCOUNT=1 THEN CALL "updateSyncMode"(USERID,ITEMID,SYNCMODE,TMPCOUNT);END IF;SET ROWCOUNT=TMPCOUNT;END
CREATE PROCEDURE PUBLIC."updateSize"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN SIZE BIGINT,IN SYNCMODE SMALLINT,OUT ROWCOUNT SMALLINT) SPECIFIC "updateSize_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE TMPCOUNT SMALLINT DEFAULT 0;UPDATE PUBLIC."Items" SET "Size"=SIZE WHERE "Id"=ITEMID;GET DIAGNOSTICS TMPCOUNT=ROW_COUNT;IF TMPCOUNT=1 THEN CALL "updateSyncMode"(USERID,ITEMID,SYNCMODE,TMPCOUNT);END IF;SET ROWCOUNT=TMPCOUNT;END
CREATE PROCEDURE PUBLIC."updateTrashed"(IN USERID VARCHAR(100),IN ITEMID VARCHAR(100),IN TRASHED BOOLEAN,IN SYNCMODE SMALLINT,OUT ROWCOUNT SMALLINT) SPECIFIC "updateTrashed_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE TMPCOUNT SMALLINT DEFAULT 0;UPDATE PUBLIC."Items" SET "Trashed"=TRASHED WHERE "Id"=ITEMID;GET DIAGNOSTICS TMPCOUNT=ROW_COUNT;IF TMPCOUNT=1 THEN CALL "updateSyncMode"(USERID,ITEMID,SYNCMODE,TMPCOUNT);END IF;SET ROWCOUNT=TMPCOUNT;END
CREATE PROCEDURE PUBLIC."selectSync"(IN USERID VARCHAR(100),IN MODE SMALLINT) SPECIFIC "selectSync_1" LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR WITH RETURN FOR SELECT "Id" AS "id","Title" AS "name","unparseTimeStamp"("DateCreated")AS "createdDateTime","unparseTimeStamp"("DateModified")AS "DateModified","MediaType","Size" AS "size",GROUP_CONCAT("Parent")AS "parent","SyncMode" AS "Mode","IsRoot","AtRoot" FROM PUBLIC."Child" WHERE "UserId"=USERID AND "SyncMode">MODE GROUP BY "Id","Title","DateCreated","DateModified","MediaType","Size","SyncMode","IsRoot","AtRoot" FOR READ ONLY;OPEN RESULT;END
CREATE PROCEDURE PUBLIC."_updateItemId"(IN USERID VARCHAR(100),IN OLDID VARCHAR(100),IN NEWID VARCHAR(100),OUT MSG VARCHAR(100)) SPECIFIC "_updateItemId_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE ERROR VARCHAR(100) DEFAULT '';UPDATE PUBLIC."Items" SET "Id"=NEWID WHERE "Id"=OLDID;IF DIAGNOSTICS(ROW_COUNT)!=1 THEN SET ERROR='Error in CALL "_updateItemId()" cannot execute UPDATE statment on "Items"';ELSE SET ERROR='';END IF;SET MSG=ERROR;END;
CREATE PROCEDURE PUBLIC."updateSync"(IN USERID VARCHAR(100),IN SYNCMODE SMALLINT,IN OLDID VARCHAR(100),IN NEWID VARCHAR(100),IN OLDNAME VARCHAR(100),IN NEWNAME VARCHAR(100),OUT MSG VARCHAR(100)) SPECIFIC "updateSync_1" LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE ERROR VARCHAR(100) DEFAULT ''; UPDATE PUBLIC."Capabilities" SET "SyncMode"=SYNCMODE WHERE "UserId"=USERID AND "ItemId"=OLDID;IF DIAGNOSTICS(ROW_COUNT)!=1 THEN SET ERROR='Error in CALL "updateSync()" cannot execute UPDATE on "Capabilities"'; ELSE IF OLDID!=NEWID THEN CALL "_updateItemId"(USERID,OLDID,NEWID,ERROR);END IF;END IF;SET MSG=ERROR;END
SET SCHEMA PUBLIC
CREATE TRIGGER PUBLIC."OnSyncMode" BEFORE UPDATE OF "SyncMode" ON PUBLIC."Capabilities" REFERENCING OLD ROW AS OLDROW NEW ROW AS NEWROW FOR EACH ROW BEGIN ATOMIC DECLARE SYNCMODE SMALLINT;IF SIGN(NEWROW."SyncMode")=-1 THEN SET SYNCMODE=BITANDNOT(OLDROW."SyncMode",ABS(NEWROW."SyncMode"));ELSEIF SIGN(NEWROW."SyncMode")=1 THEN SET SYNCMODE=BITOR(OLDROW."SyncMode",NEWROW."SyncMode");ELSE SET SYNCMODE=NEWROW."SyncMode";END IF;SET NEWROW."SyncMode"=SYNCMODE;END
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
CREATE INDEX "NameIndex" ON PUBLIC."Items"("Name")
CREATE INDEX "TrashedIndex" ON PUBLIC."Items"("Trashed")
CREATE INDEX "MimeTypeIndex" ON PUBLIC."Items"("MimeType")
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
